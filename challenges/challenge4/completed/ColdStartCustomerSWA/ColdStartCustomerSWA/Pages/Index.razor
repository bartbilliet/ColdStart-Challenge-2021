@page "/"

@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.SignalR.Client

@inject OrdersClient OrdersClient
@inject NavigationManager NavigationManager
@implements IAsyncDisposable

<AuthorizeView>
    <Authorized>
        <div class="main">
            <TemplatedList Loader="@LoadOrders" ListGroupClass="orders-list">
                <Loading>Loading...</Loading>
                <Empty>
                    <h2>No orders placed</h2>
                </Empty>
                <Item Context="item">
                    <div class="col">
                        <h5>@item.Date.ToLongDateString()</h5>
                        <span>
                            <img height="40" src="@item.IceCream?.ImageUrl" />
                            @item.IceCream?.Name
                        </span>
                    </div>
                    <div class="col">
                        Status: <strong>@item.Status</strong>
                    </div>
                    <div class="col flex-grow-0">
                        @if (item.Status == "Delivering")
                        {
                            <a href="orders/@item.Id" class="btn btn-success">
                                Track &gt;
                            </a>
                        }
                    </div>
                    </Item>
            </TemplatedList>
        </div>
    </Authorized>
    <NotAuthorized>
        <h1>Log in to view your orders</h1>
    </NotAuthorized>
</AuthorizeView>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private ClaimsPrincipal AuthenticationStateUser { get; set; }

    private HubConnection hubConnection;
    private List<string> messages = new List<string>();
    private string userInput;
    private string messageInput;

    protected override async Task OnParametersSetAsync()
    {
        AuthenticationState authenticationState;

        authenticationState = await authenticationStateTask;
        this.AuthenticationStateUser = authenticationState.User;
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadOrders();

        //Access negotiate method to get SignalR connection information
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/api"))
            .Build();

        //On SignalR "orderUpdated" hub message received, execute following:
        //Could be improved to send the message only to the user who the order belongs to
        hubConnection.On<Order>("orderUpdated", order =>
        {
            Console.WriteLine("message received: " + order.Id);

        //Reload the view
        StateHasChanged();
        });

        //Start the connectoin
        await hubConnection.StartAsync();
    }

    public async ValueTask DisposeAsync()
    {
        await hubConnection.DisposeAsync();
    }

    async Task<IEnumerable<Order>> LoadOrders()
    {
        Console.WriteLine("Load orders");
        return await OrdersClient.GetMyOrders();
    }

}
